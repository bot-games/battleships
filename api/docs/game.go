// It's autogenerated file. Do not modify it.
// Generated by https://github.com/sergei-svistunov/gostatic2lib

package docs

import (
	"net/http"
	"strings"
)

type HTTPHandler struct {
	files map[string]File
}

type File struct {
	ContentType string
	ETag        string
	Data        []byte
}

func NewHTTPHandler() *HTTPHandler {
	return &HTTPHandler{
		files: map[string]File{
			"/game.md": {
				ContentType: `text/markdown; charset=utf-8`,
				ETag:        "b8cd67ba65e265dc",
				Data: []byte{31, 139, 8, 0, 0, 0, 0, 0, 2, 255, 164, 85, 219, 110, 227, 54, 16, 125, 231, 87, 28, 192, 40, 106, 11, 173, 100, 59, 217, 94, 210, 167, 108, 226, 77, 82, 180, 104, 145, 237,
					203, 34, 88, 4, 180, 52, 142, 184, 161, 56, 2, 73, 197, 155, 188, 21, 253, 133, 0, 253, 191, 124, 73, 65, 74, 242, 165, 81, 210, 162,
					29, 36, 176, 173, 51, 231, 204, 225, 12, 69, 142, 70, 248, 173, 36, 216, 70, 147, 19, 98, 33, 243, 18, 188, 130, 47, 9, 126, 205, 168,
					181, 188, 39, 235, 80, 74, 7, 137, 149, 34, 93, 96, 173, 124, 9, 167, 30, 8, 179, 233, 231, 217, 20, 57, 105, 237, 218, 167, 133, 90,
					173, 200, 146, 241, 17, 119, 112, 165, 170, 29, 216, 64, 249, 20, 239, 216, 130, 62, 203, 170, 214, 116, 36, 4, 186, 248, 192, 141, 237, 132,
					7, 227, 151, 186, 102, 19, 20, 99, 78, 164, 29, 63, 61, 254, 1, 32, 137, 255, 73, 252, 220, 143, 152, 176, 133, 251, 111, 136, 236, 183,
					45, 123, 55, 246, 21, 222, 246, 236, 191, 69, 100, 159, 12, 179, 183, 233, 39, 187, 181, 251, 132, 4, 73, 100, 159, 246, 236, 228, 133, 250,
					167, 251, 242, 201, 94, 237, 197, 63, 177, 23, 175, 177, 223, 61, 119, 190, 207, 126, 33, 161, 101, 159, 189, 32, 189, 137, 179, 237, 186, 123, 56, 217, 176, 207, 183, 206, 147, 65, 133, 243, 215, 106, 95, 188, 0, 110, 226, 226, 53, 246, 143, 253, 110, 73, 6, 125, 111, 18, 134, 217,
					120, 122, 252, 243, 233, 241, 247, 255, 252, 183, 149, 251, 159, 66, 253, 11, 51, 197, 12, 115, 28, 224, 16, 111, 240, 13, 190, 197, 119, 248,
					126, 215, 244, 0, 44, 196, 133, 193, 74, 89, 231, 225, 27, 107, 48, 246, 42, 191, 197, 104, 58, 193, 61, 55, 200, 165, 129, 35, 143, 166,
					14, 63, 109, 247, 202, 142, 115, 169, 53, 100, 238, 21, 27, 92, 57, 242, 77, 253, 113, 60, 202, 46, 127, 61, 249, 98, 62, 173, 200, 151,
					92, 184, 172, 133, 175, 35, 122, 125, 55, 155, 76, 32, 216, 66, 147, 188, 35, 88, 105, 10, 174, 80, 179, 83, 33, 233, 153, 226, 173, 122,
					69, 240, 86, 181, 122, 41, 32, 46, 86, 209, 230, 90, 26, 15, 207, 200, 75, 105, 110, 168, 115, 217, 171, 127, 21, 83, 202, 80, 215, 199,
					51, 43, 15, 103, 83, 151, 52, 112, 48, 29, 9, 145, 32, 73, 102, 73, 18, 115, 118, 78, 180, 195, 31, 34, 50, 239, 16, 183, 3, 29,
					180, 208, 193, 0, 52, 111, 161, 195, 1, 104, 150, 10, 241, 62, 62, 11, 141, 94, 82, 235, 174, 64, 201, 86, 61, 176, 241, 82, 131, 45, 238, 200, 122, 149, 75, 157, 226, 88, 59, 14, 167, 175, 37, 84, 141, 243, 129, 33, 225, 234, 176, 34, 89, 177, 185, 9, 88, 21, 52, 149,
					201, 9, 142, 114, 54, 69, 59, 214, 56, 61, 94, 126, 162, 182, 197, 202, 133, 94, 20, 228, 188, 229, 123, 132, 222, 115, 127, 146, 182, 30,
					87, 210, 121, 178, 240, 165, 140, 220, 47, 181, 134, 102, 71, 81, 199, 165, 66, 140, 70, 56, 231, 117, 16, 113, 94, 90, 15, 137, 27, 89,
					145, 16, 179, 20, 39, 65, 46, 92, 17, 237, 224, 144, 36, 87, 159, 88, 153, 231, 3, 13, 79, 195, 36, 147, 36, 21, 243, 65, 222, 90,
					42, 127, 29, 252, 63, 39, 111, 160, 86, 33, 56, 177, 148, 147, 10, 83, 46, 9, 121, 99, 227, 64, 131, 171, 96, 209, 83, 42, 14, 186,
					26, 108, 40, 220, 98, 242, 78, 42, 45, 151, 154, 250, 125, 215, 213, 29, 111, 182, 203, 155, 174, 133, 110, 146, 138, 195, 20, 103, 220, 174,
					151, 106, 204, 83, 33, 194, 141, 85, 177, 37, 40, 179, 98, 91, 201, 168, 225, 168, 247, 239, 66, 123, 115, 171, 234, 248, 124, 73, 154, 215,
					109, 223, 194, 133, 234, 184, 177, 57, 33, 231, 130, 32, 77, 129, 37, 251, 254, 246, 115, 66, 124, 232, 222, 188, 149, 10, 227, 43, 169, 130, 50, 113, 85, 87, 103, 202, 159, 55, 75, 88, 138, 155, 155, 237, 253, 199, 113, 233, 125, 237, 142, 178, 236, 70, 249, 178, 89, 166, 57, 87,
					217, 146, 253, 215, 97, 225, 46, 91, 74, 239, 53, 197, 145, 78, 218, 234, 63, 113, 46, 245, 101, 99, 12, 89, 33, 222, 19, 225, 234, 114,
					113, 124, 250, 243, 226, 223, 11, 101, 222, 18, 101, 85, 220, 32, 89, 94, 21, 153, 14, 146, 54, 74, 78, 254, 10, 0, 0, 255, 255, 51, 25, 46, 206, 49, 8, 0, 0,
				},
			},
		},
	}
}

func (h *HTTPHandler) GetFile(fileName string) *File {
	File, exists := h.files[fileName]
	if !exists || strings.LastIndex(fileName, ".") < 1 {
		return nil
	}

	return &File
}

func (h *HTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fileName := r.URL.Path
	if fileName == "/" {
		fileName = "/index.html"
	}

	file := h.GetFile(fileName)
	if file == nil {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}

	if r.Header.Get("If-None-Match") == file.ETag {
		http.Error(w, http.StatusText(http.StatusNotModified), http.StatusNotModified)
		return
	}

	w.Header().Set("Content-Type", file.ContentType)
	w.Header().Set("Content-Encoding", "gzip")
	w.Header().Set("ETag", file.ETag)

	_, _ = w.Write(file.Data)
}
